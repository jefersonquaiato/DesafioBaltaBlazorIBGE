@page "/cities/city"

@inject IGetCityByNameUseCase GetCityByNameUseCase
@inject EventStateService EventStateService

@rendermode InteractiveServer
@attribute [StreamRendering(true)]

<CitiesMenu />

<div class="mb-3">
    <label class="form-label">Buscar por Cidade</label>
    <input type="text" class="form-control" @bind="Model.City" />
    <br />
    <button class="btn btn-info" @onclick="() => GetByCityAsync(Model.City) ">
        BUSCAR
    </button>
</div>

@if (EventStateService.Success.HasValue)
{
    @if (EventStateService.Success == true)
    {
        <div class="alert alert-success" role="alert">
            @EventStateService.Message
        </div>
    }
    else
    {
        <div class="alert alert-danger" role="alert">
            @EventStateService.Message
        </div>
    }
}

@if (_loading)
{
    <Loading />
}
else if (Ibges.Any())
{
    <div>
        Página @currentPage de @totalPages
        <button @onclick="() => ChangePage(-1)" class="btn btn-dark" disabled="@(currentPage == 1)">Anterior</button>
        <button @onclick="() => ChangePage(1)" class="btn btn-dark" disabled="@(currentPage == totalPages)">Próxima</button>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Código IBGE</th>
                <th>UF</th>
                <th>Cidade</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Ibges)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.State</td>
                    <td>@item.City</td>
                    <td>
                        <a href="/cities/edit/@item.Id" class="btn btn-primary">
                            EDITAR
                        </a>
                        &nbsp;
                        <a href="/cities/delete/@item.Id" class="btn btn-danger">
                            EXCLUIR
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else if (_searchClicked)
{
    EventStateService.Message = "Não foram encontrados registros para essa busca";
    EventStateService.Success = false;
}

@code {
    public IEnumerable<Ibge> Ibges { get; set; } = Enumerable.Empty<Ibge>();
    private Ibge? Model = new();
    private bool _loading = false;
    private bool _searchClicked = false;
    CancellationToken cancellationToken;

    int currentPage = 1;
    int totalPages = 1;
    int pageSize = 25;

    public async Task GetByCityAsync(string name)
    {

        if (EventStateService.Success == false)
        {
            EventStateService.Success = null;
        }
        _loading = true;
        _searchClicked = true;
        StateHasChanged();
        try
        {
            var totalItems = await GetCityByNameUseCase.GetTotalCityCountAsync(name, cancellationToken);
            totalPages = (int)Math.Ceiling((double)totalItems / pageSize);

            await LoadData();
        }
        catch (Exception ex)
        {
            EventStateService.Message = $"Ocorreu um erro: {ex.Message}";
            EventStateService.Success = false;
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }

    }

    private async void ChangePage(int change)
    {
        currentPage += change;
        if (currentPage < 1)
        {
            currentPage = 1;
        }
        else if (currentPage > totalPages)
        {
            currentPage = totalPages;
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        Ibges = await GetCityByNameUseCase.GetCityIbge(Model.City, cancellationToken, (currentPage - 1) * pageSize, pageSize);

        StateHasChanged();
    }
}