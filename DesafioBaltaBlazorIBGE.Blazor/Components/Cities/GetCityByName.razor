@page "/cities/city"

@inject IGetCityByNameUseCase GetCityByNameUseCase
@rendermode InteractiveServer
@attribute [StreamRendering(true)]

<CitiesMenu />

<div class="mb-3">
    <label class="form-label">Buscar por Cidade</label>
    <input type="text" class="form-control" @bind="Model.City" />
    <br />
    <button class="btn btn-info" @onclick="() => GetByCityAsync(Model.City) ">
        BUSCAR
    </button>
</div>

@if (_loading)
{
    <Loading />
}
else if (Ibges.Any())
{
    <div>
        Página @currentPage de @totalPages
        <button @onclick="() => ChangePage(-1)" class="btn btn-secondary" disabled="@(currentPage == 1)">Anterior</button>
        <button @onclick="() => ChangePage(1)" class="btn btn-secondary" disabled="@(currentPage == totalPages)">Próxima</button>
    </div>

    <table class="table">
        <thead>
        <tr>
            <th>Código IBGE</th>
            <th>UF</th>
            <th>Cidade</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in Ibges)
        {
            <tr>
                <td>@item.Id</td>
                <td>@item.State</td>
                <td>@item.City</td>
                <td>
                    <a href="/cities/edit/@item.Id" class="btn btn-primary">
                        EDITAR
                    </a>
                    &nbsp;
                    <a href="/cities/delete/@item.Id" class="btn btn-danger">
                        EXCLUIR
                    </a>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else if (_searchClicked)
{
    <p>Não foram encontrados registros para essa busca</p>
}

@code {
    public IEnumerable<Ibge> Ibges { get; set; } = Enumerable.Empty<Ibge>();
    private Ibge? Model = new();
    private bool _loading = false;
    private bool _searchClicked = false;
    CancellationToken cancellationToken;

    int currentPage = 1;
    int totalPages = 1;
    int pageSize = 25;

    public async Task GetByCityAsync(string name)
    {
        _loading = true;
        _searchClicked = true;
        StateHasChanged();
        try
        {
            var totalItems = await GetCityByNameUseCase.GetTotalCityCountAsync(name, cancellationToken);
            totalPages = (int)Math.Ceiling((double)totalItems / pageSize);

            await LoadData();
        }
        catch
        {
            
        }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }

    private void ChangePage(int change)
    {
        currentPage += change;
        if (currentPage < 1)
        {
            currentPage = 1;
        }
        else if (currentPage > totalPages)
        {
            currentPage = totalPages;
        }

        LoadData();
    }

    private async Task LoadData()
    {
        Ibges = await GetCityByNameUseCase.GetCityIbge(Model.City, cancellationToken, (currentPage - 1) * pageSize, pageSize);

        StateHasChanged();
    }
}