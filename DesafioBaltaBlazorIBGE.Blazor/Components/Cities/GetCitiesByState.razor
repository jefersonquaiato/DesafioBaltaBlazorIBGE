@using DesafioBaltaBlazorIBGE.Data.Repositories

@inject ApplicationDbContext Context
@rendermode InteractiveServer
@attribute [StreamRendering(true)]

<h3>GetCitiesByState</h3>

@if (!Ibges.Any())
{
    <div class="mb-3">
        <label class="form-label">Buscar por UF</label>
        <input type="text" class="form-control" @bind="Model.State" />
        <br />
        <button class="btn btn-info" @onclick="() => GetByStateAsync(Model.State) ">
            BUSCAR
        </button>
    </div>
}
else if (_loading)
{
    <Loading />
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Código IBGE</th>
                <th>UF</th>
                <th>Cidade</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Ibges)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.State</td>
                    <td>@item.City</td>
                    <td>
                        <a href="/products/edit/@item.Id" class="btn btn-primary">
                            EDITAR
                        </a>
                        &nbsp;
                        <a href="/products/delete/@item.Id" class="btn btn-danger">
                            EXCLUIR
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    public IEnumerable<Ibge> Ibges { get; set; } = Enumerable.Empty<Ibge>();
    private Ibge? Model = new();
    private bool _loading = false;

    public async Task GetByStateAsync(string state)
    {
        _loading = true;
        StateHasChanged();
        try
        {

            Ibges = await Context
                .Ibges
                .AsNoTracking()
                .Where(x => x.State == state)
                .ToListAsync();

        }
        catch { }
        finally
        {
            _loading = false;
            StateHasChanged();
        }
    }
}
